[{"name":"copy-loop","author":"@fabsx00","title":"Copy loop detected","description":"\nFor (buf, indices) pairs, determine those inside control structures (for, while, if ...)\nwhere any of the calls made outside of the body (block) are Inc operations. Determine\nthe first argument of that Inc operation and check if they are used as indices for\nthe write operation into the buffer.\n","score":2.0,"f":{}},{"name":"too-nested","author":"@fabsx00","title":"Nesting level higher than 3","description":"This query identifies functions with a nesting level higher than 3","score":2.0,"f":{}},{"name":"too-many-loops","author":"@fabsx00","title":"More than 4 loops","description":"This query identifies functions with more than 4 loops","score":2.0,"f":{}},{"name":"multiple-returns","author":"@fabsx00","title":"Multiple returns","description":"This query identifies functions with more than one return","score":2.0,"f":{}},{"name":"too-long","author":"@fabsx00","title":"More than 1000 lines","description":"This query identifies functions that are more than 1000 lines long","score":2.0,"f":{}},{"name":"too-high-complexity","author":"@fabsx00","title":"Cyclomatic complexity higher than 4","description":"This query identifies functions with a cyclomatic complexity higher than 4","score":2.0,"f":{}},{"name":"too-many-params","author":"@fabsx00","title":"Number of parameters larger than 4","description":"This query identifies functions with more than 4 formal parameters","score":2.0,"f":{}},{"name":"strlen-truncation","author":"@fabsx00","title":"Truncation in assigment involving strlen call","description":"-","score":2.0,"f":{}},{"name":"call-to-getwd","author":"@ursachec","title":"Insecure function getwd() used","description":"\n Avoid the getwd() function, it does not check buffer lengths.\n Use getcwd() instead, as it checks the buffer size.\n","score":4.0,"f":{}},{"name":"call-to-strtok","author":"@tuxology","title":"Insecure function strtok() used","description":"\n Avoid strtok() function as it modifies the original string in place and appends\n a null character after each token. This makes the original string unsafe.\n Suggested alternative is strtok_r() with saveptr.\n","score":4.0,"f":{}},{"name":"call-to-strcpy","author":"@tuxology","title":"Insecure functions strcpy() or strncpy() used","description":"\n Avoid strcpy() or strncpy() function. strcpy() does not check buffer lengths. \n A possible mitigation could be strncpy() which could prevent buffer overflows\n but does not null-termiante strings leading to memory corruption. A secure \n alternative (on BSD) is strlcpy().\n","score":4.0,"f":{}},{"name":"call-to-strcat","author":"@tuxology","title":"Insecure functions strcat() or strncat() used","description":"\n Avoid strcat() or strncat() functions. The can be used insucurely causing non\n null-termianted strings leading to buffer overflows or memory corruption. \n A secure alternative is strcat_s().\n","score":4.0,"f":{}},{"name":"call-to-scanf","author":"@tuxology","title":"Insecure function scanf() used","description":"\n Avoid scanf() function as it can lead to reads beyond buffer boundary and cause\n buffer overflows. A secure alternative is fgets().\n","score":4.0,"f":{}},{"name":"format-controlled-printf","author":"@tuxology","title":"Function printf(), sprintf() or vsprintf() used insecurely","description":"\n Avoid user controlled format strings like \"argv\" in printf, sprintf and vsprintf \n functions as they can cause buffer overflows. Some secure alternatives are \n snprintf() and vsnprintf().\n","score":4.0,"f":{}},{"name":"call-to-gets","author":"@tuxology","title":"Insecure function gets() used","description":"\n Avoid gets() function as it can lead to reads beyond buffer boundary and cause\n buffer overflows. Some secure alternatives are fgets() and gets_s().\n","score":4.0,"f":{}},{"name":"malloc-memcpy-int-overflow","author":"@fabsx00","title":"Dangerous copy-operation into heap-allocated buffer","description":"-","score":4.0,"f":{}}]